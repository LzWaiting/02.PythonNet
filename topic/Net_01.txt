1. osi七层模型介绍,tcp/ip模型?
	> osi七层模型:
		面向应用:
			7. 应用层:提供客户服务,具体功能由特定程序而定
				即应用程序
			作用:文件传输/电子邮件/文件服务/虚拟终端...
		面向服务:
			6. 表示层:提供数据的压缩优化,格式化/数据转化/加密...
				对应用层进行数据处理
			作用:数据格式化/代码转化/数据加密...
			5. 会话层:建立应用级的连接,选择传输服务
				建立通信进程逻辑名称和物理名称之间的联系
			作用:解除或建立与别的节点的联系
		面向通信:
			4. 传输层:提供不同的传输服务,流量控制
			作用:提供端对端的接口
		通信子网:	
			3. 网络层:数据分组,路由选择,网络互联
			作用:为数据包选择路由
			2. 链路层:进行数据转化,具体消息的发送,链路连接
			作用:传输有地址的帧以及错误检测功能
			1. 物理层:物理硬件,接口设定,网卡路由交换机...
			作用:以二进制形式在物理媒体进行数据传输
	> tcp/ip模型(五层模型)
		5. 应用层:(应用层/表示层/会话层)
		4. 传输层:
		3. 网络层:
		2. 链路层:
		1. 物理层:

2. tcp服务与udp服务有什么区别?
	> 面向连接传输服务 --> tcp 协议 --> 可靠/无丢失/失序/差错/重复 --> 流式套接字(SOCK_STREAM)
		数据连接和断开前需要进行确认,需要进行三次握手和四次挥手
		占用网络资源,效率低,一般应用在较大的文件,网络状态良好的情况下,比如邮件传输,网页获取,文件下载,登录注册...
	> 面向无连接传输服务 --> udp 协议 --> 不可靠 --> 数据报套接字(SOCK_DGRAM)
		数据传输过程中不需要确认,数据自由接收发
		占用网络资源较少,效率高,一般应用在较小的文件,网络情况较差的情况下,比如网络视频,群聊,广播发送...

3. 三次握手和四次挥手?
	> 三次握手(服务端/客户端)
		tcp传输在传输数据前建立连接过程
		1. 由 客户端 向 服务端 发送连接请求
		2. 服务端收到请求后
		   由 服务端 向 客户端 回复确认信息,表示允许连接
		3. 客户端收到服务端回复后
		   由 客户端 向 服务端 进行最终标志发送,确认连接
	> 四次挥手(主动方/被动方)
		tcp传输在传输数据后断开连接前,进行断开确认过程
		1. 由 主动方 发出报文告知 被动方 断开通知
		2. 被动方收到请求后
		   立即返回报文告知主动方已经准备断开
		3. 由 被动方 再次返回报文告知主动方,可以断开
		4. 由 主动方 发出报文 确认最终断开

4. 将完成的基本的tcp_server改写为一个,当客户端输入特殊字符退出后可以继续接受下个客户端请求的程序?

5. 复习文件的读写seek操作
try:	
	f = open(filename,'r')
	f.read()
	f.write()
	f.tell()		# 获取当前读写位置
	f.seek()		# 文件偏移f.seek(m,n)	m偏移量正为前进,负为回退;n偏移起始位置 0:开始位置,1:当前位置,2:文件尾部位置
	f.close()
except OSError as Err:
	print('打开失败',Err)
