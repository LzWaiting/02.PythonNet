IO (input/output)
	在内存中存在数据交换的操作都可以认为是IO操作
	
	和终端交互:input print...
	和磁盘交互:read write sql...
	和网络交互:recv send recvfrom sendto...

	IO 密集型程序:
		在程序执行过程中存在大量IO操作,而cpu运算操作较少
		特点:消耗cpu较少,运行效率较低
	计算密集型程序(cpu密集型程序):
		在程序执行中cpu运算较多,IO操作相对较少
		特点:消耗cpu较大,运行速度快

	IO 分类:
		1. 阻塞(block) IO
			定义:
				阻塞IO是IO的默认形态,是效率较低的一种IO情形
			阻塞情况:
				* 因为某种条件没有达成造成的阻塞
				  e.g. accept recv send input
				* 处理IO数据传输时间较长形成的阻塞
				  e.g. 网络传输过程,文件读写过程

		2. 非阻塞 IO
			定义:
				通过修改IO事件的属性,使其变为非阻塞状态(让一些条件阻塞函数不再阻塞)
			* 非阻塞IO往往和循环判断一起使用
				s.setblocking(False)	# 设置套接字为非阻塞
				示例:见block_server.py
			超时检测:
				将原本阻塞的函数设置一个阻塞时间,如果时间内条件达成则正常运行,如果仍然阻塞则视为超时,继续向下运行或产生异常
				s.settimeout(sec)		# 设置套接字超时时间
				示例:见timeout.py

		3. IO 多路复用
			定义:
				同时监控多个IO事件,当哪个IO事件准备就绪就执行哪个IO事件,以此实现可同时操作多个IO事件的并发行为.避免一个IO阻塞,造成所有IO事件都无法执行
				* IO事件准备就绪: 是一种IO必然要发生的临界状态
			IO 多路复用的编程实现:
				1. 将IO设置为关注IO
				2. 将关注IO提交给内核监测
				3. 处理内核给我们反馈的准备就绪的IO

			具体实现方案:
				select --> Windows Linux Unix
				poll   --> Linux Unix
				epoll  --> Linux Unix

			1. select方法:
				>>> import select
				rs,ws,xs = select(rlist, wlist, xlist[, timeout])
				功能:监控IO事件,阻塞等待IO事件发生
				参数:
					rlist	列表		存放我们监控等待处理的IO事件
					wlist	列表		存放我们要主动操作的IO事件
					xlist	列表		我们要关注出错处理的IO事件
					timeout 超时时间
				返回值:
					rs	列表		rlist中准备就绪的IO
					ws	列表		wlist中准备就绪的IO
					xs	列表		xlist中准备就绪的IO
				注意:
					1. wlist中如果有IO事件则select立即会返回给ws
					2. 在处理IO事件过程中,不要出现一个客户端长期占用服务端,使服务端无法运行到select的情况
					3. IO多路复用占用计算机资源少,IO效率高
				示例:
					见select_server.py

			2. poll方法:
				1. 创建poll对象
					p = select.poll()
				2. 添加注册事件
					p.register(s,POLLIN | POLLERR)
					特定事件:
						POLLIN	POLLOUT	POLLERR	POLLHUP	POLLNVAL
						rlist 	wlist 	xlist 	断开		无效数据
					p.unregister(s)	# 从关注事件中移除
				3. 阻塞等待IO事件发生
					events = p.poll()
					功能:阻塞等待IO发生
					返回值:events 是一个列表,列表中每一个元素都是一个元组,代表一个发生的IO事件
						[(fileno,event),(),(),...]
						fileno:就绪IO的文件描述符
						event:具体就绪事件
					*需要通过文件描述符(fileno)找到对应的IO对象{s.fileno():s,...}
				4. 处理具体的IO

			3. epoll 方法:
				使用方法:基本与poll方法相同
				* 将生成对象poll()改为epoll()
				* 将所有poll对象事件改为epoll对象事件
				示例:见epoll_server.py
				
				poll与epoll区别:
					1. epoll 的效率要比 poll和 select高
					2. epoll 的事件触发方式更多(EPOLLET,边缘事件)

	cookie:
		位运算
		整数按照二进制位进行运算
		& 按位与		
		| 按位或
		^ 按位异或
		<< 左移
		>> 右移		
		示例:
		11	1011
		14	1110
		11 & 14	--> 1010 --> 10
		11 | 14 --> 1111 --> 15
		11 ^ 14 --> 0101 --> 5
		11 << 2 --> 101100 --> 44	# = n * 2**m
		11 >> 2 --> 0010 --> 2		# n // m